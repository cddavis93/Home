Tuesday September 20 Notes

No significant difference in qmcpack run time with/without vtune
Strong scaling study:
walker count of 8 & 16
OMPthreads = 1,2,4,8
runs: performance-snapshot & uarch-exploration
running through and should be done tomorrow (?)

so far as walker/thread count go down 8 -> 1 the DTLB Store Overhead % increases

DTLB Overhead:
This metric estimates the performance penalty paid for missing the first-level data TLB (DTLB)
that includes hitting in the second-level data TLB (STLB) as well as performing a hardware page walk on an STLB miss.

DTLB Store Overhead:
This metric represents a fraction of cycles spent on handling first-level data TLB store misses.
As with ordinary data caching, focus on improving data locality and reducing working-set size to reduce DTLB overhead.
Additionally, consider using profile-guided optimization (PGO) to collocate frequently-used data on the same page.
Try using larger page sizes for large amounts of frequently-used data.

AOCC - OMP8 - walkers8
uarch-exploration
Microarchitecture Usage: 48.2% of Pipeline Slots
 | You code efficiency on this platform is too low.
 |
 | Possible cause: memory stalls, instruction starvation, branch misprediction
 | or long latency instructions.
 |
 | Next steps: Run Microarchitecture Exploration analysis to identify the cause
 | of the low microarchitecture usage efficiency.
 |

 Back-End Bound: 49.5% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
        Core Bound: 31.9% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 0.3% of Clockticks
            Port Utilization: 31.1% of Clockticks
             | Issue: A significant fraction of cycles was stalled due to Core
             | non-divider-related issues.
             |
             | Tips: Use vectorization to reduce pressure on the execution ports
             | as multiple elements are calculated with same uOp.
                Cycles of 0 Ports Utilized: 10.6% of Clockticks
                    Serializing Operations: 4.8% of Clockticks
                        Slow Pause: 2.8% of Clockticks
                    Mixing Vectors: 0.0% of uOps
                Cycles of 1 Port Utilized: 8.4% of Clockticks
                Cycles of 2 Ports Utilized: 10.6% of Clockticks
                Cycles of 3+ Ports Utilized: 20.5% of Clockticks
                    ALU Operation Utilization: 35.8% of Clockticks
                        Port 0: 35.6% of Clockticks
                        Port 1: 31.2% of Clockticks
                        Port 5: 33.3% of Clockticks
                        Port 6: 43.1% of Clockticks
                    Load Operation Utilization: 32.3% of Clockticks
                        Port 2: 40.9% of Clockticks
                        Port 3: 40.4% of Clockticks
                    Store Operation Utilization: 17.5% of Clockticks
                        Port 4: 17.5% of Clockticks
                        Port 7: 0.8% of Clockticks
                Vector Capacity Usage (FPU): 9.9%
                 | Vector Capacity Usage is low, which usually indicates the use
                 | of floating point scalar instructions or vector instructions
                 | with partial vector capacity. Explore the instruction mix
                 | breakdown to learn more about vectorized code.
                 |
